/* This contains headers (dependencies) of RESQUE spatial processing engine */
#ifndef RESQUE_3D_HPP
#define RESQUE_3D_HPP

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>
#include <map>
#include <cstdlib>
#include <getopt.h>
#include <time.h>
#include <sys/shm.h>
#include <unordered_map>
#include <stdlib.h>




#include <CGAL/Random.h>
#include <CGAL/Simple_cartesian.h>





#include <CGAL/Exact_predicates_exact_constructions_kernel.h>
#include <CGAL/Polyhedron_3.h>
#include <CGAL/IO/Polyhedron_iostream.h>

#include <CGAL/Nef_polyhedron_3.h>
#include <CGAL/Triangulation_3.h>
#include <CGAL/convex_decomposition_3.h> 
#include <CGAL/Tetrahedron_3.h>

#include <CGAL/Delaunay_triangulation_3.h>
#include <CGAL/boost/graph/graph_traits_Polyhedron_3.h>
#include <CGAL/boost/graph/properties_Polyhedron_3.h>
#include <CGAL/extract_mean_curvature_flow_skeleton.h>
#include <CGAL/boost/graph/split_graph_into_polylines.h>

#include <CGAL/Surface_mesh.h>
#include <CGAL/OFF_to_nef_3.h>



#include "PPMC/configuration.h"
#include "PPMC/mymesh.h"
#include "iutil.h"
#include "rtree.h"
#include "geometry/aab.h"

/*
 * definition for kernel Exact_predicates_exact_constructions_kernel
 *
 * */
typedef CGAL::Bbox_3                                     Bbox;
typedef CGAL::Exact_predicates_inexact_constructions_kernel  Kernel;
//typedef CGAL::Exact_predicates_exact_constructions_kernel  Kernel;
typedef Kernel::Triangle_3                               Triangle;
typedef std::vector<Triangle>                               Triangles;
typedef Triangles::iterator                                   Iterator;
typedef Kernel::Segment_3                                Segment;
typedef CGAL::Polyhedron_3<Kernel>                       Polyhedron;
typedef Polyhedron::Halfedge_const_handle                Halfedge_const_handle;
typedef Polyhedron::Facet_const_iterator                 Facet_const_iterator;
typedef Polyhedron::Facet_const_handle                   Facet_const_handle;



typedef CGAL::Nef_polyhedron_3<Kernel> Nef_polyhedron;
typedef Kernel::Vector_3  Vector_3;
typedef CGAL::Triangulation_3<Kernel> Triangulation;
typedef Triangulation::Point        CGAL_Point;
typedef Triangulation::Tetrahedron 	Tetrahedron;
typedef Nef_polyhedron::Volume_const_iterator Volume_const_iterator;

typedef Kernel::Point_3                                       CGAL_Point3;
typedef CGAL::Delaunay_triangulation_3<Kernel, CGAL::Fast_location> Delaunay;

/*
 * definition of CGAL for kernel Simple_cartesian
 * */

typedef CGAL::Simple_cartesian<double>		Sc_Kernel;
typedef Sc_Kernel::Point_3					Sc_Point;
typedef CGAL::Polyhedron_3<Sc_Kernel>		Sc_Polyhedron;
typedef CGAL::Mean_curvature_flow_skeletonization<Sc_Polyhedron> Sc_Skeletonization;
typedef Sc_Skeletonization::Skeleton                             Sc_Skeleton;
typedef Sc_Skeleton::vertex_descriptor                           Sc_Skeleton_vertex;
typedef boost::graph_traits<Sc_Polyhedron>::vertex_descriptor    Sc_vertex_descriptor;
typedef CGAL::Delaunay_triangulation_3<Sc_Kernel, CGAL::Fast_location> Sc_Delaunay;



// Default key
#define COMPRESSION_KEY 5678

/* Function prototypes */
void release_mem(struct query_temp &sttemp);


//bool build_index_geoms(map<int,Geometry*> & geom_polygons, ISpatialIndex* & spidx, IStorageManager* & storage);
bool build_index_geoms(std::vector<struct mbb_3d *> & geom_mbbs, SpatialIndex::ISpatialIndex* & spidx, SpatialIndex::IStorageManager* & storage);

Sc_Polyhedron *sc_extract_geometry(long offset, long length, unsigned i_decompPercentage);
void extract_skeleton(long offset, long length, unsigned i_decompPercentage, std::vector<Sc_Point> &P);
void extract_skeleton_advance(long offset, long length, unsigned i_decompPercentage, std::vector<Sc_Point> &P);


int join_bucket_spjoin(struct query_op &stop, struct query_temp &sttemp);
int join_bucket_nn_voronoi(struct query_op &stop, struct query_temp &sttemp);
int join_bucket_nn_rtree(struct query_op &stop, struct query_temp &sttemp);
int join_bucket_spjoin(struct query_op &stop, struct query_temp &sttemp);

int join_bucket(struct query_op &stop, struct query_temp &sttemp);

int execute_query(struct query_op &stop, struct query_temp &sttemp);

//for 3d spatial join

#endif

